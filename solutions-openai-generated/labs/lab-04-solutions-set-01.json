{
    "Question A": {
        "question": "Design a Finite State Machine to mimic the performance of a 1965 Ford Thunderbird\u2019s taillights. There are three inputs \u2013 left, right, and hazard. If left is the input, the left set of LEDs should progressively light up and then go dark, repeating until the signal is no longer applied. Similar logic will apply to the right LEDs. If the hazard input switch is on, all of the lights should blink on and off until the input is changed. Write out a Next State Logic and Output Logic circuit. The three inputs will be the left, right, and hazard switches. The outputs will be the 6 or 8 LEDs that you choose to use for displaying the patterns.",
        "answer": "Next State Logic\n\nLeft: \nIf left switch = 0 \tnext state = off\nIf left switch = 1 \tnext state = left_led1\n\nRight: \nIf right switch = 0\tnext state = off\nIf right switch = 1 \tnext state = right_led1\n\nHazard: \nIf hazard switch = 0\tnext state = off\nIf hazard switch = 1\tnext state = led_all \n\nOutput Logic\n\noff: \n LEDs = 0 \n\nleft_led1: \n LEDs = Left_led1\n\nright_led1: \n LEDs = Right_led1\n\nled_all: \n If cycle = even: \n LEDs= left_led1, left_led2, left_led3, right_led1, right_led2, right_led3 \n If cycle = odd: \n LEDs= 0"
    },
    "Question B": {
        "question": "Write Verilog code to realize the Finite State Machine for the taillights operation. There are three inputs \u2013 left, right, and hazard. If left is the input, the left set of LEDs should progressively light up and then go dark, repeating until the signal is no longer applied. Similar logic will apply to the right LEDs. If the hazard input switch is on, all of the lights should blink on and off until the input is changed.",
        "answer": "module DualTailLights_FSM (Left, Right, Hazard, LeftLight, RightLight);\n\n  input Left, Right, Hazard;\n  output LeftLight, RightLight;\n  \n  // Declare states\n  reg [1:0] state;\n  \n  // Assign states\n  parameter \n    STATE_INIT = 2'b00,\n    STATE_LEFT_SEQ1 = 2'b01,\n    STATE_LEFT_SEQ2 = 2'b10,\n    STATE_HAZARD = 2'b11;\n  \n  // Start of FSM\n  always @* begin \n    case(state)\n      STATE_INIT: begin\n        LeftLight = 1'b0;\n        RightLight = 1'b0;\n        if(Left == 1'b1) \n          state <= STATE_LEFT_SEQ1;\n        elseif(Right == 1'b1)\n          state <= STATE_LEFT_SEQ2;\n        elseif(Hazard == 1'b1)\n          state <= STATE_HAZARD;\n        else\n          state <= STATE_INIT;\n      end\n      \n      STATE_LEFT_SEQ1: begin\n        LeftLight = 1'b1;\n        RightLight = 1'b0;\n        if(Left == 1'b1)\n          state <= STATE_LEFT_SEQ2;\n        elseif(Hazard == 1'b1)\n          state <= STATE_HAZARD;\n        else\n          state <= STATE_INIT;\n      end\n      \n      STATE_LEFT_SEQ2: begin\n        LeftLight = 1'b0;\n        RightLight = 1'b0;\n        if(Left == 1'b1)\n          state <= STATE_LEFT_SEQ1;\n        elseif(Hazard == 1'b1)\n          state <= STATE_HAZARD;\n        else\n          state <= STATE_INIT;\n      end\n      \n      STATE_HAZARD: begin\n        LeftLight = !LeftLight;\n        RightLight = !RightLight;\n        if(Hazard == 1'b1)\n          state <= STATE_HAZARD;\n        else\n          state <= STATE_INIT;\n      end\n      \n      default:\n        // default state\n        LeftLight = 1'b0;\n        RightLight = 1'b0;\n        state <= STATE_INIT;\n    endcase\n  end\n\nendmodule"
    },
    "Execution Time": "0:00:25.940905",
    "OpenAI Parameters": "Model: text-davinci-003, Max. Tokens: 1024, Temperature: 1, N: 1"
}