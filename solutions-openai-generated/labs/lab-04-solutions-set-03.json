{
    "Question A": {
        "question": "Design a Finite State Machine to mimic the performance of a 1965 Ford Thunderbird\u2019s taillights. There are three inputs \u2013 left, right, and hazard. If left is the input, the left set of LEDs should progressively light up and then go dark, repeating until the signal is no longer applied. Similar logic will apply to the right LEDs. If the hazard input switch is on, all of the lights should blink on and off until the input is changed. Write out a Next State Logic and Output Logic circuit. The three inputs will be the left, right, and hazard switches. The outputs will be the 6 or 8 LEDs that you choose to use for displaying the patterns.",
        "answer": "Inputs: Left, Right, and Hazard Switches \nOutputs: 6 or 8 LEDs (Chosen)\n\nNext State Logic: \n\n    Q0 (Starting State): All LEDs are off \n        Q1 (Left On): Left LEDs progressively light up, then go dark, repeating until left is no longer applied \n        Q2 (Right On): Right LEDs progressively light up, then go dark, repeating until right is no longer applied \n        Q3 (Hazard On): All LEDs blink on and off until the Hazard Switch is turned off.\n        \nOutput Logic: \n\nQ0 (Starting State): All LEDs are off \n\nQ1 (Left On): Left LEDs will progressively light up, then go dark. \n\nQ2 (Right On): Right LEDs will progressively light up, then go dark. \n\nQ3 (Hazard On): All LEDs blink on and off alternately in a pattern."
    },
    "Question B": {
        "question": "Write Verilog code to realize the Finite State Machine for the taillights operation. There are three inputs \u2013 left, right, and hazard. If left is the input, the left set of LEDs should progressively light up and then go dark, repeating until the signal is no longer applied. Similar logic will apply to the right LEDs. If the hazard input switch is on, all of the lights should blink on and off until the input is changed.",
        "answer": "//Left and Right logic signals\nreg [1:0] LEFT_EN, RIGHT_EN;\n\n// Left, Right, and Hazard control signals\nwire [2:0] CTRL;\n \n// Finite State Machine\nparameter S0 = 2'b00,\n          S1 = 2'b01, \n          S2 = 2'b10, \n          S3 = 2'b11;\n\n// Internal Control logic\nwire [2:0] in_ctr;\nassign in_ctr[1] = LEFT_EN[1] | RIGHT_EN[0];\nassign in_ctr[2] = LEFT_EN[0] | RIGHT_EN[1];\nassign in_ctr[0] = CTRL[2];\n\n// FSM output\nreg [3:0] LEDA, LEDB;\n\nalways @ (in_ctr)\nbegin\n  case (in_ctr)\n    S0: {LEDA,LEDB} = 4'b0000;\n    S1: {LEDA,LEDB} = 4'b1111;\n    S2: {LEDA,LEDB} = 4'b1100;\n    S3: {LEDA,LEDB} = 4'b0011;\n  endcase\nend\n \n// FSM inputs\nreg [2:0] next_state;\n \n// FSM logic\nalways@ (in_ctr or LEFT_EN or RIGHT_EN)\nbegin\n  case (in_ctr)\n    S0: next_state = {LEFT_EN[0], RIGHT_EN[0], CTRL[2]};\n    S1: if (LEFT_EN[0] == 1)\n          next_state = S2;\n        else if (RIGHT_EN[0] == 1)\n          next_state = S3;\n        else\n          next_state = S0;\n    S2: if (LEFT_EN[1] == 1)\n          next_state = S3;\n        else\n          next_state = S0;\n    S3: if (RIGHT_EN[1] == 1)\n          next_state = S2;\n        else\n          next_state = S0;\n  endcase\nend\n\n// FSM control signals\nalways@ (next_state)\nbegin\n  CTRL = next_state;\nend"
    },
    "Execution Time": "0:00:22.005618",
    "OpenAI Parameters": "Model: text-davinci-003, Max. Tokens: 1024, Temperature: 1, N: 1"
}