{
    "Question A": {
        "question": "Design a Finite State Machine to mimic the performance of a 1965 Ford Thunderbird\u2019s taillights. There are three inputs \u2013 left, right, and hazard. If left is the input, the left set of LEDs should progressively light up and then go dark, repeating until the signal is no longer applied. Similar logic will apply to the right LEDs. If the hazard input switch is on, all of the lights should blink on and off until the input is changed. Write out a Next State Logic and Output Logic circuit. The three inputs will be the left, right, and hazard switches. The outputs will be the 6 or 8 LEDs that you choose to use for displaying the patterns.",
        "answer": "Next State Logic:\n\nIF Left = 1 THEN\nState A\nELSE IF Right = 1 THEN\nState B\nELSE IF Hazard = 1 THEN\nState C\n\nOutput Logic :\n\nState A : \nLEDs 1-3 On then LEDs 1-3 Off (repeating until the Left input is no longer applied)\n\nState B : \nLEDs 4-6 On then LEDs 4-6 Off (repeating until the Right input is no longer applied)\n\nState C : \nAll LEDs On then All LEDs Off (repeating until the Hazard input is no longer applied)"
    },
    "Question B": {
        "question": "Write Verilog code to realize the Finite State Machine for the taillights operation. There are three inputs \u2013 left, right, and hazard. If left is the input, the left set of LEDs should progressively light up and then go dark, repeating until the signal is no longer applied. Similar logic will apply to the right LEDs. If the hazard input switch is on, all of the lights should blink on and off until the input is changed.",
        "answer": "//Finite State Machine for Taillight Operation\nmodule taillight_control(left, right, hazard, leftlight, rightlight);  \n  input left, right, hazard; \n  output [3:0] leftlight, rightlight;  \n  reg [3:0] leftlight, rightlight; \n  reg [1:0] mainstate, leftstate, rightstate; \n  initial begin\n    mainstate <= 0;\n    leftstate <= 0;\n    rightstate <= 0;\n    leftlight <= 0;\n    rightlight <= 0;\n  end\n\n  always @ (posedge left or posedge right or posedge hazard)\n    begin\n      if (hazard)\n        mainstate <= 0;\n      else\n        mainstate <= 1;\n    end\n\n  always @ (posedge left or posedge right or posedge hazard)\n    begin\n      case (mainstate)\n        0: begin\n              leftlight[3:0] <= 4'b0000;\n              rightlight[3:0] <= 4'b0000;\n            end\n        1: begin\n              if (left)\n                leftstate <= leftstate + 1;\n              if (right)\n                rightstate <= rightstate + 1;\n            end\n      endcase\n    end\n\n  always @ (posedge left or posedge right or posedge hazard)\n    begin  \n      case (mainstate)\n        0: begin\n              for (int i = 0; i < 4; i++) \n                begin\n                  if (i == 0)\n                    leftlight[i] <= 1;\n                  else\n                    leftlight[i] <= 0;\n                  if (i == 0)\n                    rightlight[i] <= 1;\n                  else\n                    rightlight[i] <= 0;\n                end\n            end\n        1: begin\n              case (leftstate)\n                0:    leftlight[3:0] <= 4'b0000;\n                1:    leftlight[3:0] <= 4'b0001;\n                2:    leftlight[3:0] <= 4'b0011;\n                3:    leftlight[3:0] <= 4'b0111;\n                4:    leftlight[3:0] <= 4'b1111;\n              endcase\n              case (rightstate)\n                0:    rightlight[3:0] <= 4'b0000;\n                1:    rightlight[3:0] <= 4'b0001;\n                2:    rightlight[3:0] <= 4'b0011;\n                3:    rightlight[3:0] <= 4'b0111;\n                4:    rightlight[3:0] <= 4'b1111;\n              endcase\n            end\n      endcase\n    end\n\nendmodule"
    },
    "Execution Time": "0:00:28.777200",
    "OpenAI Parameters": "Model: text-davinci-003, Max. Tokens: 1024, Temperature: 1, N: 1"
}